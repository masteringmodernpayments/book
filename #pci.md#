# PCI Compliance

[pci]: https://www.pcisecuritystandards.org
[stripe_pci]: https://stripe.com/help/security
[rsa]: http://en.wikipedia.org/wiki/RSA_(algorithm)

One of the biggest reasons to choose Stripe over other ways of processing credit cards is that they minimize your exposure to *PCI compliance*. PCI stands for "[Payment Card Industry][pci]", if you were wondering.

Back in the early 2000s the credit card industry got together and decided on a whole bunch of interrelated standards for how to secure a payment system such that personally identifiable information, especially credit card numbers, is unlikely to be leaked to the outside world. For example, before the era of PCI compliance it was common for your unencrypted credit card number to be tacked onto your user record in an application database. Also, it was typical for sites to use plain HTTP for payment forms instead of HTTPS.

Now, though, both of those practices along with a host of others would get your merchant account cancelled. Being PCI compliant means that you adhere to all of the practices that apply to the way you process credit cards. Stripe is certified Service Provider Level 1, which means they have to have store credit card information encrypted in separate machines, possibly in separate data centers, than all of the rest of their infrastructure. It also means that nobody internal to Stripe can access unencrypted credit card numbers. Their software makes charges based on your API calls by sending information to an exclusive set of providers, entirely hidden from employees.

## Stripe and PCI

The real revolutionary part of how Stripe works is in how they [reduce your compliance scope][stripe_pci] as a merchant. Before Stripe, a typical online merchant would have a normal HTML form on their website where customers would put in their credit card information. This form would post to the merchant's server, where they would take the credit card info and pass it along to their *gateway service*, which would then talk to all of the various banks and things and then eventually deposit the money into their *merchant account*. This means, among other things, that each merchant would have to become PCI certified, even if they weren't storing the credit card info anywhere in their system. Theoretically, an attacker could stick some code into a merchant's payment processing system and divert credit card numbers. Or, if the merchant's site wasn't using HTTPS they could perform a man-in-the-middle attack and capture credit card info that way.

Stripe, with `stripe.js`, makes all of this irrelevant. When you create a form using `stripe.js` or `checkout.js` loaded from Stripe's servers, none of the customer's credit card info is sent through your servers. The javascript that gets injected into your form instead sends that info to Stripe's servers over HTTPS, where they turn it into a single-use *token*. Your server can then use that token to refer to a customer's credit card without having seen it at all.

The only thing you as a merchant have to do to be PCI compliant in this situation is to make sure you're serving up your payment-related pages over HTTPS. As long as you're loading `stripe.js` from Stripe via HTTPS into a secure webpage which POSTs to a secure endpoint, and you make sure not to put `name`s on any of the credit-card-related fields in the form (only fields with `name`s get POSTed), you don't have to worry about PCI compliance at all.

## Implementing HTTPS with Rails

Rails after v3.1 makes forcing visitors to HTTPS incredibly easy. In `config/environments/production.rb`:

```ruby
config.force_ssl = true
```

This will redirect all non-https requests to your website to the secure endpoint automatically on production. For this example it's all we need to do because Heroku provides what's called a "wildcard ssl certificate" for all apps accessed at `herokuapp.com`. However, if you're using your own URL you'll need to get your own certificate (generally around $10 per year) and install it with Heroku, which will run $20 per month. These costs vary, of course, if you're using a different hosting provider. Most Amazon-based cloud providers will charge $20 because that's how much an Elastic Load Balancer costs.

## Buying a Certificate

There are many different places where you can buy a certificate. I've had good luck buying them through my registrar [Namecheap.com][namecheap]. The steps are:

* Generate a private key
* Using your private key, generate a Certificate Signing Request
* Send the CSR to Namecheap
* Receive your shiny new certificate
* Remove the passphrase from your certificate so that the webserver can use it.

First make sure you have `openssl` installed on your machine. It comes installed by default on Mac OS X but on Linux you may have to install it from your package manager.

### Generate a Private Key

```bash
$ openssl genrsa -out example.com.key 2048
```

This generates a 2048 bit [RSA key][rsa] and stores it in `example.com.key`.

### Generate a Certificate Signing Request

```bash
$ openssl req -new -key example.com.key -out example.com.csr
```

OpenSSL will ask you a bunch of questions now. Fill them in like the prompts, but when you get to the `Common Name` question, use the exact name of web serv