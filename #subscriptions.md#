[koudoku]: https://github.com/andrewculver/koudoku
[stripe-rails]: https://github.com/thefrontside/stripe-rails
[stripe_event]: https://github.com/integrallis/stripe_event


# Subscriptions

## Outline

```text
* off the shelf stuff
* basic subscriptions
  * add member object with devise
  * member sign_up view gets credit card info
```

So far in the example project we've only dealt with one-off transactions, where the customer comes along and buys a product once and we basically never have to deal with them again. The majority of SaaS products aren't really like this, though. Most SaaS projects bill customers monthly for services, maybe with some kind of add-on system.

This is actually where things can get tricky for Stripe integrations. Stripe's subscription plan support is functional but basic. The general flow is:

1. Sign a user up for your system
2. Capture their credit card info using `stripe.js` or `checkout.js`
3. Create a Stripe-level customer record and attach them to a subscription plan
4. Stripe handles billing them every period with variety of callbacks that you can hook into to influence the process

The tricky part starts when people want to change their subscription plan and they have add-ons. Stripe automatically handles prorating subscription changes but since add-ons are handled using invoices you have to prorate them yourself. Let's handle the basic integration first and then we can talk about how to handle the weird case.

## Off the shelf solutions

There are a bunch of different rails engines out there that let you more or less drop a subscription system into your app.

* [Koudoku][koudoku] includes things like a pricing table, helpers for `stripe.js`, and robust plan creation. It does not have particularly good support for Stripe's webhooks.
* [Stripe::Rails][stripe-rails] has much better webhook support but doesn't help you as much with pricing tables or views
* [stripe_event][] handles *just* Stripe's webhooks, but it does a fairly good job of it.

You should definitely check these options out. In this chapter we're going to go over a from-scratch integration to give you a feel for how everything comes together and should help you evaluate third party gems better.

## Basic Subscription Integration

We're going to subscriptions to our sales site. Subscribers get access to every available product for one monthly price. This is a somewhat contrived example but it will demonstrate a full subscription integration.

We're going to need to make some changes to the site:

* A new `Member` model to keep track of subscribers
* Add a new controller to process subscriptions

Note that we're not using `User` here. A `User` can create products and newsletters and we don't want just anybody to be able to sign up and start doing that, at least not until we get to the chapter on Marketplaces later on. Thankfully, Devise makes it really easy to have multiple types of user accounts in the same application. Simply run the generator again:

```bash
$ rails g devise Member
$ rake db:migrate
```

Notice that Devise has added a `devise_for :members` at the top of `config/routes.rb` which lets us generate routes like `/members/sign_in`. It also added a few helpers for us to do things like authenticate members. We'll also need to keep track of members' `stripe_customer_id` so we can look them up later, so let's add that:

```bash
$ rails g migration AddStripeIdToMember stripe_customer_id:string
```

Remember that Stripe customers can only have one subscription, so there's no point in having some sort of `Subscription` model.

### Custom Signup Controller

Devise has very basic sign up flows built in, but we're going to build our own so that 

## Handling Upgrades and Downgrades

* Add a plan with monthly screencasts

## Handling Addons

* Purchase one-off print editions
